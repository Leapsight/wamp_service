[
 {wamp_service,
  [
   {dispatcher, {
      [%% pool args
       {size, 1},
       {max_overflow, 1}
      ],
      [%% worker args
       %% wamp opts
       {hostname, "${WAMP_HOSTNAME}"},
       {port, "${WAMP_PORT}"},
       {realm, <<"${WAMP_REALM}">>},
       {encoding, "${WAMP_ENCODING}"},
       %% reconnect options
       {backoff_start, 1000},
       {backoff_max, "${WAMP_BACKOFF}"},
       {retries, "${WAMP_RETRIES}"},
       %% service callbacks
       {callbacks,
        [
         {procedure, <<"com.example.add2">>, {wamp_service_example, add}, []},
         {procedure, <<"com.example.echo">>, {wamp_service_example, echo}, []},
         {procedure, <<"com.example.circular">>, {wamp_service_example, circular}, []},
         {procedure, <<"com.example.circular_service_error">>, {wamp_service_example, circular_service_error}, []},
         {procedure, <<"com.example.unknown_error">>, {wamp_service_example, unknown_error}, []},
         {procedure, <<"com.example.notfound_error">>, {wamp_service_example, notfound_error}, []},
         {procedure, <<"com.example.validation_error">>, {wamp_service_example, validation_error}, []},
         {procedure, <<"com.example.service_error">>, {wamp_service_example, service_error}, []},
         {procedure, <<"com.example.authorization_error">>, {wamp_service_example, authorization_error}, []},
         {procedure, <<"com.example.timeout">>, {wamp_service_example, timeout}, []},
         {subscription, <<"com.example.onhello">>, {wamp_service_example, onhello}},
         {subscription, <<"com.example.onadd">>, {wamp_service_example, onadd}}
        ]}
      ]}
   },
   {service, {
      [%% pool args
       {size, 25},
       {max_overflow, 100}
      ],
      [%% worker args
       %% wamp opts
       {hostname, "${WAMP_HOSTNAME}"},
       {port, "${WAMP_PORT}"},
       {realm, <<"${WAMP_REALM}">>},
       {encoding, "${WAMP_ENCODING}"},
       %% reconnect options
       {backoff, "${WAMP_BACKOFF}"},
       {retries, "${WAMP_RETRIES}"}
      ]}
   }
  ]},

 {lager,
  [
   {log_root, "log"},
   %% Default handlers for lager/lager_event
   {handlers,
    [
     {lager_console_backend, debug}
    ]},

   %% Any other sinks
   {extra_sinks,
    [
     {audit_lager_event,
      [{handlers,
        [
         {lager_console_backend, debug}
        ]
       },
       {async_threshold, 500},
       {async_threshold_window, 50}]
     }]
   }
  ]},

 {sasl, [{sasl_error_logger, false}]}
].
