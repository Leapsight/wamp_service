[
 %% service conf
 {wamp_service,
  [
   {callee_dispatcher,
    [
     %% wamp opts
     {hostname, "localhost"},
     {port, 18082},
     {realm, <<"com.magenta.test">>},
     {encoding, json},
     {reconnect, true},
     {backoff, 500},
     {retries, 10},
     %% service callbacks
     {callbacks,
      [
       {procedure, <<"com.example.add2">>, {wamp_service_example, add}},
       {procedure, <<"com.example.echo">>, {wamp_service_example, echo}},
       {procedure, <<"com.example.multiple">>, {wamp_service_example, multiple_results}},
       {procedure, <<"com.example.circular">>, {wamp_service_example, circular}},
       {procedure, <<"com.example.circular_service_error">>, {wamp_service_example, circular_service_error}},
       {procedure, <<"com.example.unknown_error">>, {wamp_service_example, unknown_error}},
       {procedure, <<"com.example.notfound_error">>, {wamp_service_example, notfound_error}},
       {procedure, <<"com.example.validation_error">>, {wamp_service_example, validation_error}},
       {procedure, <<"com.example.service_error">>, {wamp_service_example, service_error}},
       {procedure, <<"com.example.authorization_error">>, {wamp_service_example, authorization_error}},
       {procedure, <<"com.example.timeout">>, {wamp_service_example, timeout}},
       {subscription, <<"com.example.onhello">>, {wamp_service_example, onhello}},
       {subscription, <<"com.example.onadd">>, {wamp_service_example, onadd}}
      ]}
    ]
   },
   {caller_service,
    [
     %% wamp opts
     {hostname, "localhost"},
     {port, 18082},
     {realm, <<"com.magenta.test">>},
     {encoding, json},
     {reconnect, true},
     {backoff, 500},
     {retries, 10}
    ]
   }
  ]},

 {awre,
  [
   {erlbin_number, 15}
  ]},

 {lager,
  [
   {log_root, "log"},
   %% Default handlers for lager/lager_event
   {handlers,
    [
     {lager_console_backend, debug}
    ]},

   %% Any other sinks
   {extra_sinks,
    [
     {audit_lager_event,
      [{handlers,
        [
         {lager_console_backend, debug}
        ]
       },
       {async_threshold, 500},
       {async_threshold_window, 50}]
     }]
   }
  ]},

  {kernel, [{
       logger,
       [{
           handler, default, logger_std_h,
           #{
               level => error,
               formatter => {
                   logger_formatter,
                   #{
                       template => [
                           time,
                           " [", level, "]",
                           " [", pid, " ", moderlule,":", function,":", line, "] ",
                           msg,
                           "\r\n"
                       ]
                   }
               }
           }
       }]
   }]}
].
